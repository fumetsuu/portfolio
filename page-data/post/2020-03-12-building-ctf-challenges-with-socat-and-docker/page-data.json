{"componentChunkName":"component---src-templates-blog-post-js","path":"/post/2020-03-12-building-ctf-challenges-with-socat-and-docker","result":{"data":{"markdownRemark":{"id":"890fdbbe-c251-5d2e-8beb-993b9cc779d1","html":"<p>A lot of CTFs have challenges which requires the player to connect to some remote TCP service. <a href=\"https://www.docker.com/\">Docker</a> and <a href=\"https://linux.die.net/man/1/socat\">socat</a> are two tools that are very helpful when writing these sorts of CTF challenges.</p>\n<h3>Overview</h3>\n<p>We'll use <code>socat</code> to execute our program and send user input to its stdin and have its stdout send to the user. This way we can avoid having to deal with sockets in our challenge and can use basic stdin/stdout operations that we should be fairly familiar with. Then we'll use Docker to containerize our challenge for easy deployment.</p>\n<h3>The Challenge</h3>\n<p>We'll use this simple multiplication challenge which asks the user to solve 500 random multiplications to get the flag:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># chall.py</span>\n<span class=\"token comment\">#!/usr/bin/env python</span>\n\n<span class=\"token keyword\">from</span> random <span class=\"token keyword\">import</span> randint\n\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> randint<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> randint<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100000000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'What is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">}</span></span><span class=\"token string\"> * </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">}</span></span><span class=\"token string\">?: '</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        attempt <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bad!'</span><span class=\"token punctuation\">)</span>\n        exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> attempt <span class=\"token operator\">!=</span> a<span class=\"token operator\">*</span>b<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wrong!'</span><span class=\"token punctuation\">)</span>\n        exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag{you_can_do_multiplication!}'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Creating the TCP Listener</h3>\n<p>Next, we'll write a small wrapper using <code>socat</code> which will set up the TCP listener for us:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># wrapper.sh</span>\n<span class=\"token comment\">#!/bin/sh</span>\n\nsocat -dd TCP4-LISTEN:<span class=\"token string\">\"<span class=\"token variable\">$2</span>\"</span>,fork,reuseaddr EXEC:<span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span>,pty,echo<span class=\"token operator\">=</span><span class=\"token number\">0</span>,raw</code></pre></div>\n<p>We give <code>socat</code> two address specifications: <code>TCP4-LISTEN</code> and <code>EXEC</code>.</p>\n<p>The <code>TCP4-LISTEN</code> keyword instructs <code>socat</code> to listen for TCP connections. We pass the parameters <code>\"$2\"</code> (second command line argument) to specify the port to listen on, <code>fork</code> to instruct <code>socat</code> to create a child process after establishing a connection to allow for more connections, and <code>reuseaddr</code> to allow us to restart the service after the master process terminates.</p>\n<p>The <code>EXEC</code> keyword instructs <code>socat</code> to execute a command. We pass the parameters <code>\"$1\"</code> (first command line argument) to specify the command to be run, <code>pty</code> to generate a pseudo terminal, <code>echo=0</code> to prevent user input from being echoed back to the user and <code>raw</code> to disable input/output processing.</p>\n<p>If we <code>chmod +x ./wrapper.sh ./chall.py</code> and then run <code>./wrapper.sh ./chall.py 1337</code> we'll be able to <code>nc 0.0.0.0 1337</code> and be prompted with a multiplication question!</p>\n<p>If we wanted to have an inactivity timeout (of 30 seconds for example), we could include <code>-T30</code> as an option.</p>\n<h3>Containerizing with Docker</h3>\n<p>All we need to do is write a <a href=\"https://www.digitalocean.com/community/tutorials/docker-explained-using-dockerfiles-to-automate-building-of-images\">Dockerfile</a> and run a few <code>docker</code> commands. To keep the image small, we'll use the <a href=\"https://hub.docker.com/layers/python/library/python/3.7-alpine/images/sha256-adc6e9c434853cbe206648adc269d9856856a596ada763dc5891ffa4182b4f47?context=explore\">python:3.7-alpine</a> image as a base. Then we need to install <code>socat</code>, copy the files over, make them executable and then run the wrapper script. Summarised in a Dockerfile, this looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> python<span class=\"token punctuation\">:</span>3.7<span class=\"token punctuation\">-</span>alpine\n\n<span class=\"token keyword\">RUN</span> apk add <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>no<span class=\"token punctuation\">-</span>cache <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>update socat\n\n<span class=\"token keyword\">WORKDIR</span> /opt/chall\n\n<span class=\"token keyword\">COPY</span> . .\n<span class=\"token keyword\">RUN</span> chmod +x ./chall.py ./wrapper.sh\n\n<span class=\"token keyword\">EXPOSE</span> 1337\n<span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"./wrapper.sh\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./chall.py\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1337\"</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<h3>Building the Image</h3>\n<p>With our working directory being where the Dockerfile is located, all we need to do to build the image is run:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker build -t ctf-chall .</code></pre></div>\n<h3>Running the Container</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run -p 1337:1337 -t ctf-chall</code></pre></div>\n<p>There should now be a TCP listener listening on port 1337! You can connect to it with <code>nc 0.0.0.0 1337</code> to confirm.</p>\n<h3>Testing the Challenge</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\nconn <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1337</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    conn<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'What is '</span><span class=\"token punctuation\">)</span>\n    a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> conn<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">b'?:'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">b' * '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">}</span></span><span class=\"token string\">*</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">}</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>a<span class=\"token operator\">*</span>b<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n    conn<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Running the solution script should print a 500 multiplication operations, and finally the flag.</p>\n<h3>Now What?</h3>\n<p>Now that we have a containerized challenge, it's easy to deploy this to any server with Docker installed with just a few commands!</p>","frontmatter":{"date":"March 12, 2020","path":"/post/2020-03-12-building-ctf-challenges-with-socat-and-docker","title":"Building CTF Challenges with socat and Docker","tags":"ctf,infosec,development"}}},"pageContext":{"prev":null,"next":{"fileAbsolutePath":"/media/winarch-shared/code/portfolio/src/posts/2019-12-16-watevrctf-2019-writeups/index.md","frontmatter":{"title":"watevrCTF 2019 Writeups","path":"/post/2019-12-16-watevrctf-2019-writeups"}}}}}