{"componentChunkName":"component---src-templates-blog-post-js","path":"/post/2019-03-02-experimenting-with-graphql","result":{"data":{"markdownRemark":{"id":"9e4a3a4d-8a78-54f2-b377-5f498fbca00a","html":"<h2>Overview</h2>\n<p>Out of curiosity and interest of learning more about <a href=\"https://graphql.org/\">GraphQL</a>, I decided to build a <em>very</em> simple web analytics system for my website. As a starting point, all it does is track the number of visitors and unique visitors, the IP address of the visitor and the time they visited a certain page.</p>\n<h3>Set up</h3>\n<p>The web analytics system is a simple node.js server made using <a href=\"http://expressjs.com/\">express</a>, connected to a <a href=\"https://www.mongodb.com/\">MongoDB</a> database (hosted for free using <a href=\"https://www.mongodb.com/cloud/atlas\">MongoDB Atlas</a>). The GraphQL server, which I've decided to set up at the <code>/api</code> endpoint, is created using the <a href=\"https://github.com/graphql/express-graphql\">express-graphql</a> connect styled middleware package. Essentially, the server is set up so that <code>GET</code> and <code>POST</code> requests to the <code>/api</code> endpoint that have a valid GraphQL query are handled by the appropriate resolvers. The code below shows how <code>express-graphql</code> is used.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> graphqlHTTP <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express-graphql'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./graphql/schema'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> rootValue <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./graphql/resolvers'</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">graphqlHTTP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  schema<span class=\"token punctuation\">,</span>\n  rootValue\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This code alone should be enough to set up a simple GraphQL server, given <code>schema</code> and <code>rootValue</code> are well defined.</p>\n<h3><code>schema</code> and <code>rootValue</code></h3>\n<p>A schema and a bunch of resolvers are the only requirements for a simple GraphQL set up. I've built the schema for my simple project using the <code>graphql-js</code> built-in <code>buildSchema</code> function that takes a string that follows <a href=\"https://graphql.org/learn/schema/\">GraphQL's schema language</a> and creates a GraphQLSchema object from it which is required by the GraphQL server. The schema defines the types of data available as well as things such as queries (reading data) and mutations (creating/updating/deleting data). Note however, that although queries and mutations appear to be different, much like how <code>GET</code> requests shouldn't be used to modify data, while queries technically can mutate data on the server, anything that does mutate data should be explicitly labelled as a mutation to avoid confusion and unexpected behaviours. A simple schema for the basic web analytics service could look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> buildSchema <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'graphql'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">buildSchema</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\ttype Visit {\n\t\tip: String\n\t\tdate: String!\n\t}\n\n\ttype Page {\n\t\t_id: ID!\n\t\tvisitorCount: Int!\n\t\tvisitorCountUnique: Int!\n\t\tvisits: [Visit]\n\t}\n\n\ttype RootQuery {\n\t\tpages: [Page!]!\n\t\tpage(url: String!): Page\n\t}\n\n\ttype RootMutation {\n\t\taddVisit(url: String!): Page\n\t}\n\n\tschema {\n\t\tquery: RootQuery\n\t\tmutation: RootMutation\n\t}\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>On its own, the schema doesn't do much. In order to execute any kind of logic, resolvers need to be defined. A resolver is simply a function that is called when a query, mutation or some other kind of request is made to the GraphQL server. To specify resolvers with <code>express-graphql</code>, the <code>rootValue</code> property is passed to the constructor along with the <code>schema</code>. The <code>rootValue</code> variable is a Javascript object with keys that are named corresponding to the queries and mutations and values that are functions to be called when that certain query or mutation request is made. In our example, we have two queries named <code>pages</code> and <code>page</code> and one mutation named <code>addVisit</code>, so our <code>rootValue</code> object would look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> rootValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">pages</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//get pages from the database and return it</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">page</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//get page with url as specified from the database and return it</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">addVisit</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> req</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//mutate data in the database based on the given url and request object</span>\n    <span class=\"token comment\">//e.g. increment visitor count and check if visitor is unique, etc.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Making use of it</h3>\n<p>I've decided to try and have a go at using the web analytics system on my website. To do that, I set up a project on <a href=\"http://heroku.com/\">Heroku</a> and wrote a simple <a href=\"https://github.com/josephsurin/su-analytics/blob/master/browser-script/su-analytics.js\">browser script</a> that I injected into my website's HTML. All the script does is send a request to the server to let it know that someone's visited the page. I may consider writing a simple frontend for the web analytics service to visualise the data, as well as more features beyond simply counting visitors, but seeing as the main purpose of this project was to learn and experiment, and also given that there are many free web analytics solutions already available, it seems like a waste of effort and time.</p>\n<p>The repository for this project can be found <a href=\"https://github.com/josephsurin/su-analytics\">here</a>.</p>","frontmatter":{"date":"March 02, 2019","path":"/post/2019-03-02-experimenting-with-graphql","title":"Experimenting with GraphQL","tags":"development,project,backend"}}},"pageContext":{"prev":{"fileAbsolutePath":"/home/joseph/Libraries/Code/portfolio/src/posts/2019-03-19-hosting-a-discord-bot-on-heroku/index.md","frontmatter":{"title":"Hosting a Discord bot on Heroku","path":"/post/2019-03-19-hosting-a-discord-bot-on-heroku"}},"next":{"fileAbsolutePath":"/home/joseph/Libraries/Code/portfolio/src/posts/2019-02-27-unimelb-programming-proficiency-test/index.md","frontmatter":{"title":"Unimelb programming proficiency test","path":"/post/2019-02-27-unimelb-programming-proficiency-test"}}}}}